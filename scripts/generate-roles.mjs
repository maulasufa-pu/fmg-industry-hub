// scripts/generate-roles.mjs
import fs from "node:fs/promises";
import path from "node:path";
import process from "node:process";
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' }); // atau '.env'

import { createClient } from "@supabase/supabase-js";

const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
const key = process.env.SUPABASE_SERVICE_ROLE_KEY ?? process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!url || !key) {
  console.error("[generate-roles] Missing SUPABASE envs: NEXT_PUBLIC_SUPABASE_URL and SERVICE_ROLE/ANON key.");
  process.exit(1);
}

const supabase = createClient(url, key, {
  auth: { persistSession: false, autoRefreshToken: false, detectSessionInUrl: false },
  global: { fetch: (i, init) => fetch(i, { ...init, cache: "no-store" }) },
});

// Query roles
const { data, error } = await supabase.from("roles").select("id,name").order("id", { ascending: true });
if (error) {
  console.error("[generate-roles] Supabase error:", error.message);
  process.exit(1);
}
if (!data || data.length === 0) {
  console.error("[generate-roles] No rows in roles table.");
  process.exit(1);
}

// Validate id format (kebijakan: huruf kecil + angka + underscore)
const idOk = /^[a-z][a-z0-9_]*$/;
for (const r of data) {
  if (!idOk.test(r.id)) {
    console.error(`[generate-roles] Invalid role id "${r.id}". Use lowercase/underscore (e.g. "audio_engineer").`);
    process.exit(1);
  }
}

const roleIds = data.map(r => r.id);
const roleLabels = Object.fromEntries(data.map(r => [r.id, r.name]));

// Generate TS content
const file = `/* AUTO-GENERATED by scripts/generate-roles.mjs â€” DO NOT EDIT MANUALLY */
export const ROLE_IDS = [
${roleIds.map(id => `  "${id}",`).join("\n")}
] as const;

export type UserRole = typeof ROLE_IDS[number];

export const ROLE_LABEL: Record<UserRole, string> = {
${Object.entries(roleLabels).map(([id, name]) => `  "${id}": ${JSON.stringify(name)},`).join("\n")}
};

// Adjust jika kamu punya kolom/aturan admin-like sendiri.
export const isAdminLike = (r: UserRole | null | undefined): boolean =>
  r === "owner" || r === "admin";
`;

// Write to src/lib/roles.ts
const outPath = path.join(process.cwd(), "src", "lib", "roles.ts");
await fs.mkdir(path.dirname(outPath), { recursive: true });
await fs.writeFile(outPath, file, "utf8");

console.log(`[generate-roles] Wrote ${outPath} with ${roleIds.length} roles.`);
